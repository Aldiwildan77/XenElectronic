// Code generated by go-swagger; DO NOT EDIT.

package carts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ListProductsInCartHandlerFunc turns a function with the right signature into a list products in cart handler
type ListProductsInCartHandlerFunc func(ListProductsInCartParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ListProductsInCartHandlerFunc) Handle(params ListProductsInCartParams) middleware.Responder {
	return fn(params)
}

// ListProductsInCartHandler interface for that can handle valid list products in cart params
type ListProductsInCartHandler interface {
	Handle(ListProductsInCartParams) middleware.Responder
}

// NewListProductsInCart creates a new http.Handler for the list products in cart operation
func NewListProductsInCart(ctx *middleware.Context, handler ListProductsInCartHandler) *ListProductsInCart {
	return &ListProductsInCart{Context: ctx, Handler: handler}
}

/*ListProductsInCart swagger:route GET /carts/{cart_id}/products carts listProductsInCart

List Products in the cart

*/
type ListProductsInCart struct {
	Context *middleware.Context
	Handler ListProductsInCartHandler
}

func (o *ListProductsInCart) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewListProductsInCartParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
