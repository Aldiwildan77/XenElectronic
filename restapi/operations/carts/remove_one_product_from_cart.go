// Code generated by go-swagger; DO NOT EDIT.

package carts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// RemoveOneProductFromCartHandlerFunc turns a function with the right signature into a remove one product from cart handler
type RemoveOneProductFromCartHandlerFunc func(RemoveOneProductFromCartParams) middleware.Responder

// Handle executing the request and returning a response
func (fn RemoveOneProductFromCartHandlerFunc) Handle(params RemoveOneProductFromCartParams) middleware.Responder {
	return fn(params)
}

// RemoveOneProductFromCartHandler interface for that can handle valid remove one product from cart params
type RemoveOneProductFromCartHandler interface {
	Handle(RemoveOneProductFromCartParams) middleware.Responder
}

// NewRemoveOneProductFromCart creates a new http.Handler for the remove one product from cart operation
func NewRemoveOneProductFromCart(ctx *middleware.Context, handler RemoveOneProductFromCartHandler) *RemoveOneProductFromCart {
	return &RemoveOneProductFromCart{Context: ctx, Handler: handler}
}

/*RemoveOneProductFromCart swagger:route DELETE /carts/{cart_id}/products/{product_id} carts removeOneProductFromCart

Delete a Product from cart

*/
type RemoveOneProductFromCart struct {
	Context *middleware.Context
	Handler RemoveOneProductFromCartHandler
}

func (o *RemoveOneProductFromCart) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewRemoveOneProductFromCartParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
