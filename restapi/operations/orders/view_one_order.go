// Code generated by go-swagger; DO NOT EDIT.

package orders

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ViewOneOrderHandlerFunc turns a function with the right signature into a view one order handler
type ViewOneOrderHandlerFunc func(ViewOneOrderParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ViewOneOrderHandlerFunc) Handle(params ViewOneOrderParams) middleware.Responder {
	return fn(params)
}

// ViewOneOrderHandler interface for that can handle valid view one order params
type ViewOneOrderHandler interface {
	Handle(ViewOneOrderParams) middleware.Responder
}

// NewViewOneOrder creates a new http.Handler for the view one order operation
func NewViewOneOrder(ctx *middleware.Context, handler ViewOneOrderHandler) *ViewOneOrder {
	return &ViewOneOrder{Context: ctx, Handler: handler}
}

/*ViewOneOrder swagger:route GET /orders/{orderId} orders viewOneOrder

View order details

*/
type ViewOneOrder struct {
	Context *middleware.Context
	Handler ViewOneOrderHandler
}

func (o *ViewOneOrder) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewViewOneOrderParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
