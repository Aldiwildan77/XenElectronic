// Code generated by go-swagger; DO NOT EDIT.

package orders

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CheckoutHandlerFunc turns a function with the right signature into a checkout handler
type CheckoutHandlerFunc func(CheckoutParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CheckoutHandlerFunc) Handle(params CheckoutParams) middleware.Responder {
	return fn(params)
}

// CheckoutHandler interface for that can handle valid checkout params
type CheckoutHandler interface {
	Handle(CheckoutParams) middleware.Responder
}

// NewCheckout creates a new http.Handler for the checkout operation
func NewCheckout(ctx *middleware.Context, handler CheckoutHandler) *Checkout {
	return &Checkout{Context: ctx, Handler: handler}
}

/*Checkout swagger:route POST /orders orders checkout

Create order for the cart

*/
type Checkout struct {
	Context *middleware.Context
	Handler CheckoutHandler
}

func (o *Checkout) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCheckoutParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// CheckoutBody checkout body
//
// swagger:model CheckoutBody
type CheckoutBody struct {

	// cart id
	// Required: true
	// Format: uuid
	CartID *strfmt.UUID `json:"cart_id"`

	// customer address
	// Required: true
	// Min Length: 1
	CustomerAddress *string `json:"customer_address"`

	// customer email
	// Required: true
	// Min Length: 1
	// Format: email
	CustomerEmail *strfmt.Email `json:"customer_email"`

	// customer name
	// Required: true
	// Min Length: 1
	CustomerName *string `json:"customer_name"`
}

// Validate validates this checkout body
func (o *CheckoutBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCartID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCustomerAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCustomerEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCustomerName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CheckoutBody) validateCartID(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"cart_id", "body", o.CartID); err != nil {
		return err
	}

	if err := validate.FormatOf("body"+"."+"cart_id", "body", "uuid", o.CartID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *CheckoutBody) validateCustomerAddress(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"customer_address", "body", o.CustomerAddress); err != nil {
		return err
	}

	if err := validate.MinLength("body"+"."+"customer_address", "body", string(*o.CustomerAddress), 1); err != nil {
		return err
	}

	return nil
}

func (o *CheckoutBody) validateCustomerEmail(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"customer_email", "body", o.CustomerEmail); err != nil {
		return err
	}

	if err := validate.MinLength("body"+"."+"customer_email", "body", string(*o.CustomerEmail), 1); err != nil {
		return err
	}

	if err := validate.FormatOf("body"+"."+"customer_email", "body", "email", o.CustomerEmail.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *CheckoutBody) validateCustomerName(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"customer_name", "body", o.CustomerName); err != nil {
		return err
	}

	if err := validate.MinLength("body"+"."+"customer_name", "body", string(*o.CustomerName), 1); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CheckoutBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CheckoutBody) UnmarshalBinary(b []byte) error {
	var res CheckoutBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
